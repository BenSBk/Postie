{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Postie is a module acting as an elegant alternative to RemoteFunctions that offers a timeout parameter when invoking another machine. The main benefit of this is the ability to prevent the server infinitely yielding after invoking the client, which is a major negative to RemoteFunctions. Postie is really just a wrapper for RemoteEvents and does not use RemoteFunctions under the hood. Server to client usage Server local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) local function getBallsOnScreen ( player ) local isSuccessful , amountOfBalls = Postie . invokeClient ( player , \"GetObjectsOnScreen\" , 5 , \"Balls\" ) if isSuccessful then -- check for timeout -- a malicious client can always modify the returned data! if typeof ( amountOfBalls ) == \"number\" then return true , amountOfBalls end end return false end Client local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) Postie . setCallback ( \"GetObjectsOnScreen\" , function ( objectType ) return amountOnScreenByObjectType [ objectType ] end ) Client to server usage Server local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) Postie . setCallback ( \"GetCoins\" , function ( player ) return coinsByPlayer [ player ] end ) Client local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) local function getCoins () return Postie . invokeServer ( \"GetCoins\" , 5 ) end","title":"Home"},{"location":"#server-to-client-usage","text":"","title":"Server to client usage"},{"location":"#server","text":"local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) local function getBallsOnScreen ( player ) local isSuccessful , amountOfBalls = Postie . invokeClient ( player , \"GetObjectsOnScreen\" , 5 , \"Balls\" ) if isSuccessful then -- check for timeout -- a malicious client can always modify the returned data! if typeof ( amountOfBalls ) == \"number\" then return true , amountOfBalls end end return false end","title":"Server"},{"location":"#client","text":"local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) Postie . setCallback ( \"GetObjectsOnScreen\" , function ( objectType ) return amountOnScreenByObjectType [ objectType ] end )","title":"Client"},{"location":"#client-to-server-usage","text":"","title":"Client to server usage"},{"location":"#server_1","text":"local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) Postie . setCallback ( \"GetCoins\" , function ( player ) return coinsByPlayer [ player ] end )","title":"Server"},{"location":"#client_1","text":"local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Postie = require ( ReplicatedStorage . Postie ) local function getCoins () return Postie . invokeServer ( \"GetCoins\" , 5 ) end","title":"Client"},{"location":"api/","text":"Postie.invokeClient Postie.invokeClient( player: Instance<Player>, id: string, timeout: number, ...sent: any ) => isSuccessful: boolean, ...returned: any Invoke player with sent data. Invocation identified by id . Yield until timeout (given in seconds) is reached and return false, or a signal is received back from the client and return true plus the data returned from the client. Info This function yields. Warning This function will throw if it is called from the client. Postie.invokeServer Postie.invokeServer( id: string, timeout: number, ...sent: any ) => isSuccessful: boolean, ...returned: any Invoke the server with sent data. Invocation identified by id . Yield until timeout (given in seconds) is reached and return false, or a signal is received back from the server and return true plus the data returned from the server. Info This function yields. Warning This function will throw if it is called from the server. Postie.setCallback Postie.setCallback( id: string, callback?: (...) -> ...returned: any ) Set the callback that is invoked when an invocation identified by id is received. Data sent with the invocation are passed to the callback. If server-side, the player who invoked is implicitly received as the first argument. Postie.getCallback Postie.getCallback( id: string ) => callback?: (...) Return the callback corresponding with id .","title":"API"},{"location":"api/#postieinvokeclient","text":"Postie.invokeClient( player: Instance<Player>, id: string, timeout: number, ...sent: any ) => isSuccessful: boolean, ...returned: any Invoke player with sent data. Invocation identified by id . Yield until timeout (given in seconds) is reached and return false, or a signal is received back from the client and return true plus the data returned from the client. Info This function yields. Warning This function will throw if it is called from the client.","title":"Postie.invokeClient"},{"location":"api/#postieinvokeserver","text":"Postie.invokeServer( id: string, timeout: number, ...sent: any ) => isSuccessful: boolean, ...returned: any Invoke the server with sent data. Invocation identified by id . Yield until timeout (given in seconds) is reached and return false, or a signal is received back from the server and return true plus the data returned from the server. Info This function yields. Warning This function will throw if it is called from the server.","title":"Postie.invokeServer"},{"location":"api/#postiesetcallback","text":"Postie.setCallback( id: string, callback?: (...) -> ...returned: any ) Set the callback that is invoked when an invocation identified by id is received. Data sent with the invocation are passed to the callback. If server-side, the player who invoked is implicitly received as the first argument.","title":"Postie.setCallback"},{"location":"api/#postiegetcallback","text":"Postie.getCallback( id: string ) => callback?: (...) Return the callback corresponding with id .","title":"Postie.getCallback"}]}